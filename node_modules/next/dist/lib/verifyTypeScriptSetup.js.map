{"version":3,"sources":["../../lib/verifyTypeScriptSetup.ts"],"names":["writeJson","fileName","object","fs","promises","writeFile","JSON","stringify","replace","os","EOL","hasTypeScript","dir","typescriptFiles","length","checkDependencies","isYarn","requiredPackages","file","pkg","resolutions","Map","missingPackages","filter","p","set","_","get","packagesHuman","map","index","join","packagesCli","console","error","chalk","bold","red","cyan","process","exit","verifyTypeScriptSetup","pagesDir","tsConfigPath","path","yarnLockFile","hasTsConfig","firstTimeSetup","tsConfig","readFile","then","val","trim","hasTypeScriptFiles","tsPath","ts","compilerOptions","target","parsedValue","ScriptTarget","ES5","suggested","lib","allowJs","skipLibCheck","strict","forceConsistentCasingInFileNames","noEmit","esModuleInterop","value","reason","module","ModuleKind","ESNext","moduleResolution","ModuleResolutionKind","NodeJs","resolveJsonModule","isolatedModules","jsx","JsxEmit","Preserve","formatDiagnosticHost","getCanonicalFileName","getCurrentDirectory","sys","getNewLine","log","yellow","messages","appTsConfig","parsedTsConfig","parsedCompilerOptions","config","readTsConfig","readConfigFile","Error","formatDiagnostic","parse","result","parseJsonConfigFileContent","dirname","errors","code","options","e","name","info","message","option","Object","keys","valueToCheck","undefined","coloredOption","push","exclude","include","warn","forEach","appTypeDeclarations","existsSync","writeFileSync"],"mappings":"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","sourcesContent":["import chalk from 'next/dist/compiled/chalk'\nimport fs from 'fs'\nimport os from 'os'\nimport path from 'path'\n\nimport { fileExists } from './file-exists'\nimport { recursiveReadDir } from './recursive-readdir'\nimport { resolveRequest } from './resolve-request'\n\nfunction writeJson(fileName: string, object: object): Promise<void> {\n  return fs.promises.writeFile(\n    fileName,\n    JSON.stringify(object, null, 2).replace(/\\n/g, os.EOL) + os.EOL\n  )\n}\n\nasync function hasTypeScript(dir: string): Promise<boolean> {\n  const typescriptFiles = await recursiveReadDir(\n    dir,\n    /.*\\.(ts|tsx)$/,\n    /(node_modules|.*\\.d\\.ts)/\n  )\n\n  return typescriptFiles.length > 0\n}\n\nasync function checkDependencies({\n  dir,\n  isYarn,\n}: {\n  dir: string\n  isYarn: boolean\n}) {\n  const requiredPackages = [\n    { file: 'typescript', pkg: 'typescript' },\n    { file: '@types/react/index.d.ts', pkg: '@types/react' },\n    { file: '@types/node/index.d.ts', pkg: '@types/node' },\n  ]\n\n  let resolutions = new Map<string, string>()\n\n  const missingPackages = requiredPackages.filter((p) => {\n    try {\n      resolutions.set(p.pkg, resolveRequest(p.file, `${dir}/`))\n      return false\n    } catch (_) {\n      return true\n    }\n  })\n\n  if (missingPackages.length < 1) {\n    return resolutions.get('typescript')!\n  }\n\n  const packagesHuman = missingPackages\n    .map(\n      (p, index, { length }) =>\n        (index > 0\n          ? index === length - 1\n            ? length > 2\n              ? ', and '\n              : ' and '\n            : ', '\n          : '') + p.pkg\n    )\n    .join('')\n  const packagesCli = missingPackages.map((p) => p.pkg).join(' ')\n\n  console.error(\n    chalk.bold.red(\n      `It looks like you're trying to use TypeScript but do not have the required package(s) installed.`\n    )\n  )\n  console.error()\n  console.error(\n    chalk.bold(`Please install ${chalk.bold(packagesHuman)} by running:`)\n  )\n  console.error()\n  console.error(\n    `\\t${chalk.bold.cyan(\n      (isYarn ? 'yarn add --dev' : 'npm install --save-dev') + ' ' + packagesCli\n    )}`\n  )\n  console.error()\n  console.error(\n    chalk.bold(\n      'If you are not trying to use TypeScript, please remove the ' +\n        chalk.cyan('tsconfig.json') +\n        ' file from your package root (and any TypeScript files).'\n    )\n  )\n  console.error()\n  process.exit(1)\n}\n\nexport async function verifyTypeScriptSetup(\n  dir: string,\n  pagesDir: string\n): Promise<void> {\n  const tsConfigPath = path.join(dir, 'tsconfig.json')\n  const yarnLockFile = path.join(dir, 'yarn.lock')\n\n  const hasTsConfig = await fileExists(tsConfigPath)\n  const isYarn = await fileExists(yarnLockFile)\n\n  let firstTimeSetup = false\n  if (hasTsConfig) {\n    const tsConfig = await fs.promises\n      .readFile(tsConfigPath, 'utf8')\n      .then((val) => val.trim())\n    firstTimeSetup = tsConfig === '' || tsConfig === '{}'\n  } else {\n    const hasTypeScriptFiles = await hasTypeScript(pagesDir)\n    if (hasTypeScriptFiles) {\n      firstTimeSetup = true\n    } else {\n      return\n    }\n  }\n\n  const tsPath = await checkDependencies({ dir, isYarn })\n  const ts = (await import(tsPath)) as typeof import('typescript')\n\n  const compilerOptions: any = {\n    // These are suggested values and will be set when not present in the\n    // tsconfig.json\n    // 'parsedValue' matches the output value from ts.parseJsonConfigFileContent()\n    target: {\n      parsedValue: ts.ScriptTarget.ES5,\n      suggested: 'es5',\n    },\n    lib: { suggested: ['dom', 'dom.iterable', 'esnext'] },\n    allowJs: { suggested: true },\n    skipLibCheck: { suggested: true },\n    strict: { suggested: false },\n    forceConsistentCasingInFileNames: { suggested: true },\n    noEmit: { suggested: true },\n\n    // These values are required and cannot be changed by the user\n    // Keep this in sync with the webpack config\n    esModuleInterop: {\n      value: true,\n      reason: 'requirement for babel',\n    },\n    module: {\n      parsedValue: ts.ModuleKind.ESNext,\n      value: 'esnext',\n      reason: 'for dynamic import() support',\n    },\n    moduleResolution: {\n      parsedValue: ts.ModuleResolutionKind.NodeJs,\n      value: 'node',\n      reason: 'to match webpack resolution',\n    },\n    resolveJsonModule: { value: true },\n    isolatedModules: {\n      value: true,\n      reason: 'requirement for babel',\n    },\n    jsx: { parsedValue: ts.JsxEmit.Preserve, value: 'preserve' },\n  }\n\n  const formatDiagnosticHost = {\n    getCanonicalFileName: (fileName: string) => fileName,\n    getCurrentDirectory: ts.sys.getCurrentDirectory,\n    getNewLine: () => os.EOL,\n  }\n\n  if (firstTimeSetup) {\n    console.log(\n      chalk.yellow(\n        `We detected TypeScript in your project and created a ${chalk.bold(\n          'tsconfig.json'\n        )} file for you.`\n      )\n    )\n    console.log()\n\n    await writeJson(tsConfigPath, {})\n  }\n\n  const messages = []\n  let appTsConfig\n  let parsedTsConfig\n  let parsedCompilerOptions\n  try {\n    const { config: readTsConfig, error } = ts.readConfigFile(\n      tsConfigPath,\n      ts.sys.readFile\n    )\n\n    if (error) {\n      throw new Error(ts.formatDiagnostic(error, formatDiagnosticHost))\n    }\n\n    appTsConfig = readTsConfig\n\n    // Get TS to parse and resolve any \"extends\"\n    // Calling this function also mutates the tsconfig, adding in \"include\" and\n    // \"exclude\", but the compilerOptions remain untouched\n    parsedTsConfig = JSON.parse(JSON.stringify(readTsConfig))\n    const result = ts.parseJsonConfigFileContent(\n      parsedTsConfig,\n      ts.sys,\n      path.dirname(tsConfigPath)\n    )\n\n    if (result.errors) {\n      result.errors = result.errors.filter(\n        ({ code }) =>\n          // No inputs were found in config file\n          code !== 18003\n      )\n    }\n\n    if (result.errors?.length) {\n      throw new Error(\n        ts.formatDiagnostic(result.errors[0], formatDiagnosticHost)\n      )\n    }\n\n    parsedCompilerOptions = result.options\n  } catch (e) {\n    if (e && e.name === 'SyntaxError') {\n      console.error(\n        chalk.red.bold(\n          'Could not parse',\n          chalk.cyan('tsconfig.json') + '.',\n          'Please make sure it contains syntactically correct JSON.'\n        )\n      )\n    }\n\n    console.info(e?.message ? `${e.message}` : '')\n    process.exit(1)\n    return\n  }\n\n  if (appTsConfig.compilerOptions == null) {\n    appTsConfig.compilerOptions = {}\n    firstTimeSetup = true\n  }\n\n  for (const option of Object.keys(compilerOptions)) {\n    const { parsedValue, value, suggested, reason } = compilerOptions[option]\n\n    const valueToCheck = parsedValue === undefined ? value : parsedValue\n    const coloredOption = chalk.cyan('compilerOptions.' + option)\n\n    if (suggested != null) {\n      if (parsedCompilerOptions[option] === undefined) {\n        appTsConfig.compilerOptions[option] = suggested\n        messages.push(\n          `${coloredOption} to be ${chalk.bold(\n            'suggested'\n          )} value: ${chalk.cyan.bold(suggested)} (this can be changed)`\n        )\n      }\n    } else if (parsedCompilerOptions[option] !== valueToCheck) {\n      appTsConfig.compilerOptions[option] = value\n      messages.push(\n        `${coloredOption} ${chalk.bold(\n          valueToCheck == null ? 'must not' : 'must'\n        )} be ${valueToCheck == null ? 'set' : chalk.cyan.bold(value)}` +\n          (reason != null ? ` (${reason})` : '')\n      )\n    }\n  }\n\n  // tsconfig will have the merged \"include\" and \"exclude\" by this point\n  if (parsedTsConfig.exclude == null) {\n    appTsConfig.exclude = ['node_modules']\n  }\n\n  if (parsedTsConfig.include == null) {\n    appTsConfig.include = ['next-env.d.ts', '**/*.ts', '**/*.tsx']\n  }\n\n  if (messages.length > 0) {\n    if (firstTimeSetup) {\n      console.info(\n        chalk.bold(\n          'Your',\n          chalk.cyan('tsconfig.json'),\n          'has been populated with default values.'\n        )\n      )\n      console.info()\n    } else {\n      console.warn(\n        chalk.bold(\n          'The following changes are being made to your',\n          chalk.cyan('tsconfig.json'),\n          'file:'\n        )\n      )\n      messages.forEach((message) => {\n        console.warn('  - ' + message)\n      })\n      console.warn()\n    }\n    await writeJson(tsConfigPath, appTsConfig)\n  }\n\n  // Reference `next` types\n  const appTypeDeclarations = path.join(dir, 'next-env.d.ts')\n  if (!fs.existsSync(appTypeDeclarations)) {\n    fs.writeFileSync(\n      appTypeDeclarations,\n      '/// <reference types=\"next\" />' +\n        os.EOL +\n        '/// <reference types=\"next/types/global\" />' +\n        os.EOL\n    )\n  }\n}\n"]}