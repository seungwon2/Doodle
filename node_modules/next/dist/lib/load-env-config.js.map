{"version":3,"sources":["../../lib/load-env-config.ts"],"names":["combinedEnv","undefined","loadEnvConfig","dir","dev","isTest","process","env","NODE_ENV","mode","dotenvFiles","filter","Boolean","envFile","dotEnvPath","path","join","stats","fs","statSync","isFile","contents","readFileSync","result","parsed","dotenv","parse","log","info","Object","assign","err","code","error","key","keys","startsWith"],"mappings":"yEAAA,8CACA,kDACA,gEACA,sFACA,yE,w4BAIA,GAAIA,CAAAA,WAA4B,CAAGC,SAAnC,CAEO,QAASC,CAAAA,aAAT,CAAuBC,GAAvB,CAAoCC,GAApC,CAAgE,CACrE;AACA;AACA,GAAIJ,WAAJ,CAAiB,MAAOA,CAAAA,WAAP,CAEjB,KAAMK,CAAAA,MAAM,CAAGC,OAAO,CAACC,GAAR,CAAYC,QAAZ,GAAyB,MAAxC,CACA,KAAMC,CAAAA,IAAI,CAAGJ,MAAM,CAAG,MAAH,CAAYD,GAAG,CAAG,aAAH,CAAmB,YAArD,CACA,KAAMM,CAAAA,WAAW,CAAG,CACjB,QAAOD,IAAK,QADK,CAEjB,QAAOA,IAAK,EAFK,CAGlB;AACA;AACA;AACAA,IAAI,GAAK,MAAT,EAAoB,YANF,CAOlB,MAPkB,EAQlBE,MARkB,CAQXC,OARW,CAApB,CAUAZ,WAAW,CAAG,CACZ,GAAIM,OAAO,CAACC,GADA,CAAd,CAIA,IAAK,KAAMM,CAAAA,OAAX,GAAsBH,CAAAA,WAAtB,CAAmC,CACjC;AACA,KAAMI,CAAAA,UAAU,CAAGC,cAAKC,IAAL,CAAUb,GAAV,CAAeU,OAAf,CAAnB,CAEA,GAAI,CACF,KAAMI,CAAAA,KAAK,CAAGC,YAAGC,QAAH,CAAYL,UAAZ,CAAd,CAEA;AACA,GAAI,CAACG,KAAK,CAACG,MAAN,EAAL,CAAqB,CACnB,SACD,CAED,KAAMC,CAAAA,QAAQ,CAAGH,YAAGI,YAAH,CAAgBR,UAAhB,CAA4B,MAA5B,CAAjB,CACA,GAAIS,CAAAA,MAA0B,CAAG,EAAjC,CACAA,MAAM,CAACC,MAAP,CAAgBC,gBAAOC,KAAP,CAAaL,QAAb,CAAhB,CAEAE,MAAM,CAAG,0BAAaA,MAAb,CAAT,CAEA,GAAIA,MAAM,CAACC,MAAX,CAAmB,CACjBG,GAAG,CAACC,IAAJ,CAAU,mBAAkBf,OAAQ,EAApC,EACD,CAEDgB,MAAM,CAACC,MAAP,CAAc9B,WAAd,CAA2BuB,MAAM,CAACC,MAAlC,EACD,CAAC,MAAOO,GAAP,CAAY,CACZ,GAAIA,GAAG,CAACC,IAAJ,GAAa,QAAjB,CAA2B,CACzBL,GAAG,CAACM,KAAJ,CAAW,2BAA0BpB,OAAQ,EAA7C,CAAgDkB,GAAhD,EACD,CACF,CACF,CAED;AACA,IAAK,KAAMG,CAAAA,GAAX,GAAkBL,CAAAA,MAAM,CAACM,IAAP,CAAYnC,WAAZ,CAAlB,CAA4C,CAC1C,GACEkC,GAAG,CAACE,UAAJ,CAAe,cAAf,GACA,MAAO9B,CAAAA,OAAO,CAACC,GAAR,CAAY2B,GAAZ,CAAP,GAA4B,WAF9B,CAGE,CACA5B,OAAO,CAACC,GAAR,CAAY2B,GAAZ,EAAmBlC,WAAW,CAACkC,GAAD,CAA9B,CACD,CACF,CAED,MAAOlC,CAAAA,WAAP,CACD","sourcesContent":["import fs from 'fs'\nimport path from 'path'\nimport * as log from '../build/output/log'\nimport dotenvExpand from 'next/dist/compiled/dotenv-expand'\nimport dotenv, { DotenvConfigOutput } from 'next/dist/compiled/dotenv'\n\nexport type Env = { [key: string]: string }\n\nlet combinedEnv: Env | undefined = undefined\n\nexport function loadEnvConfig(dir: string, dev?: boolean): Env | false {\n  // don't reload env if we already have since this breaks escaped\n  // environment values e.g. \\$ENV_FILE_KEY\n  if (combinedEnv) return combinedEnv\n\n  const isTest = process.env.NODE_ENV === 'test'\n  const mode = isTest ? 'test' : dev ? 'development' : 'production'\n  const dotenvFiles = [\n    `.env.${mode}.local`,\n    `.env.${mode}`,\n    // Don't include `.env.local` for `test` environment\n    // since normally you expect tests to produce the same\n    // results for everyone\n    mode !== 'test' && `.env.local`,\n    '.env',\n  ].filter(Boolean) as string[]\n\n  combinedEnv = {\n    ...(process.env as any),\n  } as Env\n\n  for (const envFile of dotenvFiles) {\n    // only load .env if the user provided has an env config file\n    const dotEnvPath = path.join(dir, envFile)\n\n    try {\n      const stats = fs.statSync(dotEnvPath)\n\n      // make sure to only attempt to read files\n      if (!stats.isFile()) {\n        continue\n      }\n\n      const contents = fs.readFileSync(dotEnvPath, 'utf8')\n      let result: DotenvConfigOutput = {}\n      result.parsed = dotenv.parse(contents)\n\n      result = dotenvExpand(result)\n\n      if (result.parsed) {\n        log.info(`Loaded env from ${envFile}`)\n      }\n\n      Object.assign(combinedEnv, result.parsed)\n    } catch (err) {\n      if (err.code !== 'ENOENT') {\n        log.error(`Failed to load env from ${envFile}`, err)\n      }\n    }\n  }\n\n  // load global env values prefixed with `NEXT_PUBLIC_` to process.env\n  for (const key of Object.keys(combinedEnv)) {\n    if (\n      key.startsWith('NEXT_PUBLIC_') &&\n      typeof process.env[key] === 'undefined'\n    ) {\n      process.env[key] = combinedEnv[key]\n    }\n  }\n\n  return combinedEnv\n}\n"]}