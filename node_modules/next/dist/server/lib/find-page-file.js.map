{"version":3,"sources":["../../../server/lib/find-page-file.ts"],"names":["findPageFile","rootDir","normalizedPagePath","pageExtensions","foundPagePaths","extension","relativePagePath","pagePath","startsWith","endsWith","push","relativePagePathWithIndex","pagePathWithIndex","length","chalk","cyan"],"mappings":"uEAAA,0BACA,uEACA,qDACA,2C,mFAEO,cAAeA,CAAAA,YAAf,CACLC,OADK,CAELC,kBAFK,CAGLC,cAHK,CAImB,CACxB,GAAIC,CAAAA,cAAwB,CAAG,EAA/B,CAEA,IAAK,KAAMC,CAAAA,SAAX,GAAwBF,CAAAA,cAAxB,CAAwC,CACtC,KAAMG,CAAAA,gBAAgB,CAAI,GAAEJ,kBAAmB,IAAGG,SAAU,EAA5D,CACA,KAAME,CAAAA,QAAQ,CAAG,eAAKN,OAAL,CAAcK,gBAAd,CAAjB,CAEA;AACA;AACA,GACEJ,kBAAkB,CAACM,UAAnB,CAA8B,QAA9B,GACA,CAACN,kBAAkB,CAACO,QAAnB,CAA4B,QAA5B,CAFH,CAGE,CACA,GAAI,KAAM,6BAAYF,QAAZ,CAAV,CAAiC,CAC/BH,cAAc,CAACM,IAAf,CAAoBJ,gBAApB,EACD,CACF,CAED,KAAMK,CAAAA,yBAAyB,CAAG,eAChCT,kBADgC,CAE/B,SAAQG,SAAU,EAFa,CAAlC,CAIA,KAAMO,CAAAA,iBAAiB,CAAG,eAAKX,OAAL,CAAcU,yBAAd,CAA1B,CACA,GAAI,KAAM,6BAAYC,iBAAZ,CAAV,CAA0C,CACxCR,cAAc,CAACM,IAAf,CAAoBC,yBAApB,EACD,CACF,CAED,GAAIP,cAAc,CAACS,MAAf,CAAwB,CAA5B,CAA+B,CAC7B,MAAO,KAAP,CACD,CAED,GAAIT,cAAc,CAACS,MAAf,CAAwB,CAA5B,CAA+B,CAC7B,cACG,4BAA2BC,eAAMC,IAAN,CAC1B,eAAK,OAAL,CAAcX,cAAc,CAAC,CAAD,CAA5B,CAD0B,CAE1B,QAAOU,eAAMC,IAAN,CACP,eAAK,OAAL,CAAcX,cAAc,CAAC,CAAD,CAA5B,CADO,CAEP,oBAAmBU,eAAMC,IAAN,CAAWb,kBAAX,CAA+B,GALtD,EAOD,CAED,MAAOE,CAAAA,cAAc,CAAC,CAAD,CAArB,CACD","sourcesContent":["import { join } from 'path'\nimport chalk from 'next/dist/compiled/chalk'\nimport { isWriteable } from '../../build/is-writeable'\nimport { warn } from '../../build/output/log'\n\nexport async function findPageFile(\n  rootDir: string,\n  normalizedPagePath: string,\n  pageExtensions: string[]\n): Promise<string | null> {\n  let foundPagePaths: string[] = []\n\n  for (const extension of pageExtensions) {\n    const relativePagePath = `${normalizedPagePath}.${extension}`\n    const pagePath = join(rootDir, relativePagePath)\n\n    // only /index and /sub/index when /sub/index/index.js is allowed\n    // see test/integration/route-indexes for expected index handling\n    if (\n      normalizedPagePath.startsWith('/index') ||\n      !normalizedPagePath.endsWith('/index')\n    ) {\n      if (await isWriteable(pagePath)) {\n        foundPagePaths.push(relativePagePath)\n      }\n    }\n\n    const relativePagePathWithIndex = join(\n      normalizedPagePath,\n      `index.${extension}`\n    )\n    const pagePathWithIndex = join(rootDir, relativePagePathWithIndex)\n    if (await isWriteable(pagePathWithIndex)) {\n      foundPagePaths.push(relativePagePathWithIndex)\n    }\n  }\n\n  if (foundPagePaths.length < 1) {\n    return null\n  }\n\n  if (foundPagePaths.length > 1) {\n    warn(\n      `Duplicate page detected. ${chalk.cyan(\n        join('pages', foundPagePaths[0])\n      )} and ${chalk.cyan(\n        join('pages', foundPagePaths[1])\n      )} both resolve to ${chalk.cyan(normalizedPagePath)}.`\n    )\n  }\n\n  return foundPagePaths[0]\n}\n"]}