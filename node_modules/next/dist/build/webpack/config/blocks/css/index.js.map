{"version":3,"sources":["../../../../../../build/webpack/config/blocks/css/index.ts"],"names":["regexLikeCss","regexCssGlobal","regexCssModules","regexSassGlobal","regexSassModules","css","ctx","config","sassPreprocessors","loader","require","resolve","options","sourceMap","sassOptions","fns","oneOf","test","__next_css_remove","postCssPlugins","rootDirectory","isProduction","push","issuer","use","reason","sideEffects","include","exclude","filter","Boolean","isServer","customAppFile","path","relative","isClient","name","MiniCssExtractPlugin","filename","chunkFilename","ignoreOrder","fn"],"mappings":"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","sourcesContent":["import curry from 'next/dist/compiled/lodash.curry'\nimport path from 'path'\nimport webpack, { Configuration } from 'webpack'\nimport MiniCssExtractPlugin from '../../../plugins/mini-css-extract-plugin'\nimport { loader, plugin } from '../../helpers'\nimport { ConfigurationContext, ConfigurationFn, pipe } from '../../utils'\nimport { getCssModuleLoader, getGlobalCssLoader } from './loaders'\nimport {\n  getCustomDocumentError,\n  getGlobalImportError,\n  getGlobalModuleImportError,\n  getLocalModuleImportError,\n} from './messages'\nimport { getPostCssPlugins } from './plugins'\n\n// RegExps for all Style Sheet variants\nconst regexLikeCss = /\\.(css|scss|sass)$/\n\n// RegExps for Style Sheets\nconst regexCssGlobal = /(?<!\\.module)\\.css$/\nconst regexCssModules = /\\.module\\.css$/\n\n// RegExps for Syntactically Awesome Style Sheets\nconst regexSassGlobal = /(?<!\\.module)\\.(scss|sass)$/\nconst regexSassModules = /\\.module\\.(scss|sass)$/\n\nexport const css = curry(async function css(\n  ctx: ConfigurationContext,\n  config: Configuration\n) {\n  const sassPreprocessors: webpack.RuleSetUseItem[] = [\n    // First, process files with `sass-loader`: this inlines content, and\n    // compiles away the proprietary syntax.\n    {\n      loader: require.resolve('sass-loader'),\n      options: {\n        // Source maps are required so that `resolve-url-loader` can locate\n        // files original to their source directory.\n        sourceMap: true,\n        sassOptions: ctx.sassOptions,\n      },\n    },\n    // Then, `sass-loader` will have passed-through CSS imports as-is instead\n    // of inlining them. Because they were inlined, the paths are no longer\n    // correct.\n    // To fix this, we use `resolve-url-loader` to rewrite the CSS\n    // imports to real file paths.\n    {\n      loader: require.resolve('resolve-url-loader'),\n      options: {\n        // Source maps are not required here, but we may as well emit\n        // them.\n        sourceMap: true,\n      },\n    },\n  ]\n\n  const fns: ConfigurationFn[] = [\n    loader({\n      oneOf: [\n        {\n          // Impossible regex expression\n          test: /a^/,\n          loader: 'noop-loader',\n          options: { __next_css_remove: true },\n        },\n      ],\n    }),\n  ]\n\n  const postCssPlugins = await getPostCssPlugins(\n    ctx.rootDirectory,\n    ctx.isProduction,\n    // TODO: In the future, we should stop supporting old CSS setups and\n    // unconditionally inject ours. When that happens, we should remove this\n    // function argument.\n    true\n  )\n\n  // CSS cannot be imported in _document. This comes before everything because\n  // global CSS nor CSS modules work in said file.\n  fns.push(\n    loader({\n      oneOf: [\n        {\n          test: regexLikeCss,\n          // Use a loose regex so we don't have to crawl the file system to\n          // find the real file name (if present).\n          issuer: { test: /pages[\\\\/]_document\\./ },\n          use: {\n            loader: 'error-loader',\n            options: {\n              reason: getCustomDocumentError(),\n            },\n          },\n        },\n      ],\n    })\n  )\n\n  // CSS Modules support must be enabled on the server and client so the class\n  // names are availble for SSR or Prerendering.\n  fns.push(\n    loader({\n      oneOf: [\n        {\n          // CSS Modules should never have side effects. This setting will\n          // allow unused CSS to be removed from the production build.\n          // We ensure this by disallowing `:global()` CSS at the top-level\n          // via the `pure` mode in `css-loader`.\n          sideEffects: false,\n          // CSS Modules are activated via this specific extension.\n          test: regexCssModules,\n          // CSS Modules are only supported in the user's application. We're\n          // not yet allowing CSS imports _within_ `node_modules`.\n          issuer: {\n            include: [ctx.rootDirectory],\n            exclude: /node_modules/,\n          },\n          use: getCssModuleLoader(ctx, postCssPlugins),\n        },\n      ],\n    })\n  )\n  fns.push(\n    loader({\n      oneOf: [\n        // Opt-in support for Sass (using .scss or .sass extensions).\n        {\n          // Sass Modules should never have side effects. This setting will\n          // allow unused Sass to be removed from the production build.\n          // We ensure this by disallowing `:global()` Sass at the top-level\n          // via the `pure` mode in `css-loader`.\n          sideEffects: false,\n          // Sass Modules are activated via this specific extension.\n          test: regexSassModules,\n          // Sass Modules are only supported in the user's application. We're\n          // not yet allowing Sass imports _within_ `node_modules`.\n          issuer: {\n            include: [ctx.rootDirectory],\n            exclude: /node_modules/,\n          },\n          use: getCssModuleLoader(ctx, postCssPlugins, sassPreprocessors),\n        },\n      ],\n    })\n  )\n\n  // Throw an error for CSS Modules used outside their supported scope\n  fns.push(\n    loader({\n      oneOf: [\n        {\n          test: [regexCssModules, regexSassModules].filter(Boolean),\n          use: {\n            loader: 'error-loader',\n            options: {\n              reason: getLocalModuleImportError(),\n            },\n          },\n        },\n      ],\n    })\n  )\n\n  if (ctx.isServer) {\n    fns.push(\n      loader({\n        oneOf: [\n          {\n            test: [regexCssGlobal, regexSassGlobal].filter(Boolean),\n            use: require.resolve('next/dist/compiled/ignore-loader'),\n          },\n        ],\n      })\n    )\n  } else if (ctx.customAppFile) {\n    fns.push(\n      loader({\n        oneOf: [\n          {\n            // A global CSS import always has side effects. Webpack will tree\n            // shake the CSS without this option if the issuer claims to have\n            // no side-effects.\n            // See https://github.com/webpack/webpack/issues/6571\n            sideEffects: true,\n            test: regexCssGlobal,\n            issuer: { include: ctx.customAppFile },\n            use: getGlobalCssLoader(ctx, postCssPlugins),\n          },\n        ],\n      })\n    )\n    fns.push(\n      loader({\n        oneOf: [\n          {\n            // A global Sass import always has side effects. Webpack will tree\n            // shake the Sass without this option if the issuer claims to have\n            // no side-effects.\n            // See https://github.com/webpack/webpack/issues/6571\n            sideEffects: true,\n            test: regexSassGlobal,\n            issuer: { include: ctx.customAppFile },\n            use: getGlobalCssLoader(ctx, postCssPlugins, sassPreprocessors),\n          },\n        ],\n      })\n    )\n  }\n\n  // Throw an error for Global CSS used inside of `node_modules`\n  fns.push(\n    loader({\n      oneOf: [\n        {\n          test: [regexCssGlobal, regexSassGlobal].filter(Boolean),\n          issuer: { include: [/node_modules/] },\n          use: {\n            loader: 'error-loader',\n            options: {\n              reason: getGlobalModuleImportError(),\n            },\n          },\n        },\n      ],\n    })\n  )\n\n  // Throw an error for Global CSS used outside of our custom <App> file\n  fns.push(\n    loader({\n      oneOf: [\n        {\n          test: [regexCssGlobal, regexSassGlobal].filter(Boolean),\n          use: {\n            loader: 'error-loader',\n            options: {\n              reason: getGlobalImportError(\n                ctx.customAppFile &&\n                  path.relative(ctx.rootDirectory, ctx.customAppFile)\n              ),\n            },\n          },\n        },\n      ],\n    })\n  )\n\n  if (ctx.isClient) {\n    // Automatically transform references to files (i.e. url()) into URLs\n    // e.g. url(./logo.svg)\n    fns.push(\n      loader({\n        oneOf: [\n          {\n            // This should only be applied to CSS files\n            issuer: { test: regexLikeCss },\n            // Exclude extensions that webpack handles by default\n            exclude: [/\\.(js|mjs|jsx|ts|tsx)$/, /\\.html$/, /\\.json$/],\n            use: {\n              // `file-loader` always emits a URL reference, where `url-loader`\n              // might inline the asset as a data URI\n              loader: require.resolve('next/dist/compiled/file-loader'),\n              options: {\n                // Hash the file for immutable cacheability\n                name: 'static/media/[name].[hash].[ext]',\n              },\n            },\n          },\n        ],\n      })\n    )\n  }\n\n  if (ctx.isClient && ctx.isProduction) {\n    // Extract CSS as CSS file(s) in the client-side production bundle.\n    fns.push(\n      plugin(\n        new MiniCssExtractPlugin({\n          filename: 'static/css/[contenthash].css',\n          chunkFilename: 'static/css/[contenthash].css',\n          // Next.js guarantees that CSS order \"doesn't matter\", due to imposed\n          // restrictions:\n          // 1. Global CSS can only be defined in a single entrypoint (_app)\n          // 2. CSS Modules generate scoped class names by default and cannot\n          //    include Global CSS (:global() selector).\n          //\n          // While not a perfect guarantee (e.g. liberal use of `:global()`\n          // selector), this assumption is required to code-split CSS.\n          //\n          // If this warning were to trigger, it'd be unactionable by the user,\n          // but also not valid -- so we disable it.\n          ignoreOrder: true,\n        })\n      )\n    )\n  }\n\n  const fn = pipe(...fns)\n  return fn(config)\n})\n"]}